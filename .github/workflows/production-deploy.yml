name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:  

jobs:
  build-and-deploy-frontend:
    name: Build and Deploy Frontend to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run Tests
        run: npm test
        working-directory: ./frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./frontend

      - name: Deploy Frontend to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY_PRODUCTION_FRONTEND }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_FRONTEND_PRODUCTION }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}'
          echo "Frontend production deployment triggered."

      - name: Verify Frontend Deployment
        run: |
          sleep 60  # Wait for deployment to process
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://group-bse24-x-todoapp-2-frontend.onrender.com)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Frontend Production Health Check Failed with status $RESPONSE"
            exit 1
          else
            echo "Frontend Production Deployed Successfully."
          fi

      - name: Tag Successful Frontend Deployment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const tagName = `prod-frontend-success-${Date.now()}`;
            await github.rest.git.createRef({
              ...context.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha,
            });
            console.log(`Tagged commit ${context.sha} as ${tagName}`);

  build-and-deploy-backend:
    name: Build and Deploy Backend to Production
    runs-on: ubuntu-latest
    needs: build-and-deploy-frontend  # Ensure frontend is deployed first

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install
        working-directory: ./backend

      - name: Run Tests
        run: npm test
        working-directory: ./backend

      - name: Build Backend
        run: npm run build
        working-directory: ./backend

      - name: Deploy Backend to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY_PRODUCTION_BACKEND }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_BACKEND_PRODUCTION }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}'
          echo "Backend production deployment triggered."

      - name: Verify Backend Deployment
        run: |
          sleep 60  # Wait for deployment to process
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://group-bse24-x-todoapp-2-backend.onrender.com/getTodoList)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Backend Production Health Check Failed with status $RESPONSE"
            exit 1
          else
            echo "Backend Production Deployed Successfully."
          fi

      - name: Tag Successful Backend Deployment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const tagName = `prod-backend-success-${Date.now()}`;
            await github.rest.git.createRef({
              ...context.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha,
            });
            console.log(`Tagged commit ${context.sha} as ${tagName}`);

  rollback-frontend:
    name: Rollback Frontend Deployment
    runs-on: ubuntu-latest
    needs: build-and-deploy-backend
    if: failure()

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history to access tags

      - name: Find Last Successful Frontend Deployment Tag
        id: find-frontend-tag
        run: |
          LAST_TAG=$(git tag --list "prod-frontend-success-*" --sort=-creatordate | head -n 1)
          if [ -z "$LAST_TAG" ]; then
            echo "No previous successful frontend deployment tags found."
            exit 1
          fi
          echo "LAST_TAG_FRONTEND=${LAST_TAG}" >> $GITHUB_ENV
          echo "Last successful frontend tag: ${LAST_TAG}"

      - name: Checkout Last Successful Frontend Commit
        if: env.LAST_TAG_FRONTEND != ''
        run: |
          git checkout tags/${LAST_TAG_FRONTEND} -b rollback-frontend

      - name: Deploy Frontend Rollback to Render Production
        if: env.LAST_TAG_FRONTEND != ''
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY_PRODUCTION_FRONTEND }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_FRONTEND_PRODUCTION }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}'
          echo "Frontend rollback deployment triggered."

  rollback-backend:
    name: Rollback Backend Deployment
    runs-on: ubuntu-latest
    needs: rollback-frontend
    if: failure()

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history to access tags

      - name: Find Last Successful Backend Deployment Tag
        id: find-backend-tag
        run: |
          LAST_TAG=$(git tag --list "prod-backend-success-*" --sort=-creatordate | head -n 1)
          if [ -z "$LAST_TAG" ]; then
            echo "No previous successful backend deployment tags found."
            exit 1
          fi
          echo "LAST_TAG_BACKEND=${LAST_TAG}" >> $GITHUB_ENV
          echo "Last successful backend tag: ${LAST_TAG}"

      - name: Checkout Last Successful Backend Commit
        if: env.LAST_TAG_BACKEND != ''
        run: |
          git checkout tags/${LAST_TAG_BACKEND} -b rollback-backend

      - name: Deploy Backend Rollback to Render Production
        if: env.LAST_TAG_BACKEND != ''
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY_PRODUCTION_BACKEND }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_BACKEND_PRODUCTION }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}'
          echo "Backend rollback deployment triggered."

  notify-failure:
    name: Notify Team of Deployment Failure
    runs-on: ubuntu-latest
    needs:
      - build-and-deploy-frontend
      - build-and-deploy-backend
      - rollback-frontend
      - rollback-backend
    if: failure()

    steps:
      - name: Send Failure Notification to Slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": ":x: Production deployment failed and rollback was triggered. Please check the CI/CD pipeline for details."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
